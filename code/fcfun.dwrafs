f(x: A) -> (A - > A) = return \y: A.x+y

g(F: A -> A) -> A = return F(a)

main(x) = g(f(x))
-------------------------------------------
compile-dwarfs
-------------------------------------------
f :prd: FunA(FunAA) by
  apply(f_x :prd: A, f_ret :con: FunAA):
    f_clos >> f_ret

f_clos :prd: FunAA by
  apply(y :prd: A, f_clos_ret :con: A):
    (f_x + y) >> f_clos_ret

g :prd: Fun(FunAA)A by
  apply(g_F :prd: FunAA, g_ret :con: A):
    g_F >> apply(a, g_ret)

main :prd: FunA by
  apply(main_x :prd: FunA):
    f >> apply(main_x, main_g)

main_g :con: FunAA:
  g >> apply(main_g^p, DONE)
-------------------------------------------
drop(f_ret |-> main_g)
-------------------------------------------
f :prd: FunA by
  apply(f_x :prd: A):
    f_clos >> main_g

f_clos :prd: FunAA by
  apply(y :prd: A, f_clos_ret :con: A):
    (f_x + y) >> f_clos_ret

g :prd: Fun(FunAA)A by
  apply(g_F :prd: FunAA, g_ret :con: A):
    g_F >> apply(a, g_ret)

main :prd: FunA by
  apply(main_x :prd: FunA):
    f >> apply(main_x)

main_g :con: FunAA:
  g >> apply(main_g^p, DONE)
-------------------------------------------
drop(g_F |-> main_g^p, g_ret |-> DONE)
-------------------------------------------
f :prd: FunA by
  apply(f_x :prd: A):
    f_clos >> main_g

f_clos :prd: FunAA by
  apply(y :prd: A, f_clos_ret :con: A):
    (f_x + y) >> f_clos_ret

g :prd: Fun by
  apply:
    main_g^p >> apply(a, DONE)

main :prd: FunA by
  apply(main_x :prd: FunA):
    f >> apply(main_x)

main_g :con: FunAA:
  g >> apply
-------------------------------------------
drop(main_g^p |-> f_clos)
-------------------------------------------
f :prd: FunA by
  apply(f_x :prd: A):
    f_clos >> main_g

f_clos :prd: FunAA by
  apply(y :prd: A, f_clos_ret :con: A):
    (f_x + y) >> f_clos_ret

g :prd: Fun by
  apply:
    f_clos >> apply(a, DONE)

main :prd: FunA by
  apply(main_x :prd: FunA):
    f >> apply(main_x)

main_g :con: FunAA:
  g >> apply
-------------------------------------------
drop(f_clos_ret |-> DONE)
-------------------------------------------
f :prd: FunA by
  apply(f_x :prd: A):
    f_clos >> main_g

f_clos :prd: FunA by
  apply(y :prd: A):
    (f_x + y) >> DONE

g :prd: Fun by
  apply:
    f_clos >> apply(a)

main :prd: FunA by
  apply(main_x :prd: FunA):
    f >> apply(main_x)

main_g :con: FunAA:
  g >> apply
