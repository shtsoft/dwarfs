TRAIT Foo
  Foo.bar1(y: A) -> A
  Foo.bar2() -> A

f(x: A) -> Foo
  return CLASS {
    bar1(y) => return x+y,
    bar2() => return x
  }

g(foo: Foo) -> A = return foo.bar1(a)+foo.bar2()

main(x) = g(f(x))
---------------------------------------------------------------------------------------------------
compile-codata
---------------------------------------------------------------------------------------------------
f :prd: FunAFoo by
  apply(:prd: A, :con: Foo):
    f_class >> f-apply_1

f_class :prd: Foo by
  bar1(:prd: A, :con: A):
    (f-apply^1 + f_class-bar1^1) >> f_class-bar1_1
  bar2(:con: A):
    f-apply^1 >> f_class-bar2_1

g :prd: FunFooA by
  apply(:prd: Foo, :con: A):
    g-apply^1 >> bar1(a, g_a)

main :prd: FunA by
  apply(:prd: A):
    f >> apply(main-apply^1, main_g)

g_a :con: A:
  g-apply^1 >> bar2(g_b)

g_b :con: A:
  (g_a^p + g_b^p) >> g-apply_1

main_g :con: Foo:
  g >> apply(main_g^p, DONE)
---------------------------------------------------------------------------------------------------
drop(f-apply_1 |-> main_g)
---------------------------------------------------------------------------------------------------
f :prd: FunA by
  apply(:prd: A):
    f_class >> main_g

f_class :prd: Foo by
  bar1(:prd: A, :con: A):
    (f-apply^1 + f_class-bar1^1) >> f_class-bar1_1
  bar2(:con: A):
    f-apply^1 >> f_class-bar2_1

g :prd: FunFooA by
  apply(:prd: Foo, :con: A):
    g-apply^1 >> bar1(a, g_a)

main :prd: FunA by
  apply(:prd: A):
    f >> apply(main-apply^1)

g_a :con: A:
  g-apply^1 >> bar2(g_b)

g_b :con: A:
  (g_a^p + g_b^p) >> g-apply_1

main_g :con: Foo:
  g >> apply(main_g^p, DONE)
---------------------------------------------------------------------------------------------------
drop(g-apply^1 |-> main_g^p, g-apply_1 |-> DONE)
---------------------------------------------------------------------------------------------------
f :prd: FunA by
  apply(:prd: A):
    f_class >> main_g

f_class :prd: Foo by
  bar1(:prd: A, :con: A):
    (f-apply^1 + f_class-bar1^1) >> f_class-bar1_1
  bar2(:con: A):
    f-apply^1 >> f_class-bar2_1

g :prd: Fun by
  apply:
    main_g^p >> bar1(a, g_a)

main :prd: FunA by
  apply(:prd: A):
    f >> apply(main-apply^1)

g_a :con: A:
  main_g^p >> bar2(g_b)

g_b :con: A:
  (g_a^p + g_b^p) >> DONE

main_g :con: Foo:
  g >> apply
---------------------------------------------------------------------------------------------------
drop(main_g^p |-> f_class)
---------------------------------------------------------------------------------------------------
f :prd: FunA by
  apply(:prd: A):
    f_class >> main_g

f_class :prd: Foo by
  bar1(:prd: A, :con: A):
    (f-apply^1 + f_class-bar1^1) >> f_class-bar1_1
  bar2(:con: A):
    f-apply^1 >> f_class-bar2_1

g :prd: Fun by
  apply:
    f_class >> bar1(a, g_a)

main :prd: FunA by
  apply(:prd: A):
    f >> apply(main-apply^1)

g_a :con: A:
  f_class >> bar2(g_b)

g_b :con: A:
  (g_a^p + g_b^p) >> DONE

main_g :con: Foo:
  g >> apply
---------------------------------------------------------------------------------------------------
drop(f_class-bar1_1 |-> g_a)
---------------------------------------------------------------------------------------------------
f :prd: FunA by
  apply(:prd: A):
    f_class >> main_g

f_class :prd: Foo by
  bar1(:prd: A, :con: A):
    (f-apply^1 + f_class-bar1^1) >> f_class-bar1_1
  bar2(:con: A):
    f-apply^1 >> f_class-bar2_1

f_class' :prd: Foo' by
  bar1(:prd: A):
    (f-apply^1 + f_class'-bar1^1) >> g_a
  bar2(:con: A):
    f-apply^1 >> f_class'-bar2_1

g :prd: Fun by
  apply:
    f_class' >> bar1(a)

main :prd: FunA by
  apply(:prd: A):
    f >> apply(main-apply^1)

g_a :con: A:
  f_class >> bar2(g_b)

g_b :con: A:
  (g_a^p + g_b^p) >> DONE

main_g :con: Foo:
  g >> apply
---------------------------------------------------------------------------------------------------
drop(f_class-bar2_1 |-> g_b)
---------------------------------------------------------------------------------------------------
f :prd: FunA by
  apply(:prd: A):
    f_class >> main_g

f_class :prd: Foo by
  bar1(:prd: A, :con: A):
    (f-apply^1 + f_class-bar1^1) >> f_class-bar1_1
  bar2(:con: A):
    f-apply^1 >> f_class-bar2_1

f_class' :prd: Foo' by
  bar1(:prd: A):
    (f-apply^1 + f_class'-bar1^1) >> g_a
  bar2(:con: A):
    f-apply^1 >> f_class'-bar2_1

f_class'' :prd: Foo'' by
  bar1(:prd: A, :con: A):
    (f-apply^1 + f_class''-bar1^1) >> f_class''-bar1_1
  bar2:
    f-apply^1 >> g_b

g :prd: Fun by
  apply:
    f_class' >> bar1(a)

main :prd: FunA by
  apply(:prd: A):
    f >> apply(main-apply^1)

g_a :con: A:
  f_class'' >> bar2

g_b :con: A:
  (g_a^p + g_b^p) >> DONE

main_g :con: Foo:
  g >> apply
---------------------------------------------------------------------------------------------------
drop(g_a^p |-> f-apply^1 + f_class'-bar1^1)
---------------------------------------------------------------------------------------------------
f :prd: FunA by
  apply(:prd: A):
    f_class >> main_g

f_class :prd: Foo by
  bar1(:prd: A, :con: A):
    (f-apply^1 + f_class-bar1^1) >> f_class-bar1_1
  bar2(:con: A):
    f-apply^1 >> f_class-bar2_1

f_class' :prd: Foo' by
  bar1(:prd: A):
    (f-apply^1 + f_class'-bar1^1) >> g_a
  bar2(:con: A):
    f-apply^1 >> f_class'-bar2_1

f_class'' :prd: Foo'' by
  bar1(:prd: A, :con: A):
    (f-apply^1 + f_class''-bar1^1) >> f_class''-bar1_1
  bar2:
    f-apply^1 >> g_b

g :prd: Fun by
  apply:
    f_class' >> bar1(a)

main :prd: FunA by
  apply(:prd: A):
    f >> apply(main-apply^1)

g_a :con: A:
  f_class'' >> bar2

g_b :con: A:
  (f-apply^1 + f_class-bar1^1 + g_b^p) >> DONE

main_g :con: Foo:
  g >> apply
---------------------------------------------------------------------------------------------------
drop(g_b^p |-> f-apply^1)
---------------------------------------------------------------------------------------------------
f :prd: FunA by
  apply(:prd: A):
    f_class >> main_g

f_class :prd: Foo by
  bar1(:prd: A, :con: A):
    (f-apply^1 + f_class-bar1^1) >> f_class-bar1_1
  bar2(:con: A):
    f-apply^1 >> f_class-bar2_1

f_class' :prd: Foo' by
  bar1(:prd: A):
    (f-apply^1 + f_class'-bar1^1) >> g_a
  bar2(:con: A):
    f-apply^1 >> f_class'-bar2_1

f_class'' :prd: Foo'' by
  bar1(:prd: A, :con: A):
    (f-apply^1 + f_class''-bar1^1) >> f_class''-bar1_1
  bar2:
    f-apply^1 >> g_b

g :prd: Fun by
  apply:
    f_class' >> bar1(a)

main :prd: FunA by
  apply(:prd: A):
    f >> apply(main-apply^1)

g_a :con: A:
  f_class'' >> bar2

g_b :con: A:
  (f-apply^1 + f_class-bar1^1 + f-apply^1) >> DONE

main_g :con: Foo:
  g >> apply
---------------------------------------------------------------------------------------------------
dead code elimination
---------------------------------------------------------------------------------------------------
f :prd: FunA by
  apply(:prd: A):
    f_class >> main_g

f_class :prd: Foo by

f_class' :prd: Foo' by
  bar1(:prd: A):
    (f-apply^1 + f_class'-bar1^1) >> g_a

f_class'' :prd: Foo'' by
  bar2:
    f-apply^1 >> g_b

g :prd: Fun by
  apply:
    f_class' >> bar1(a)

main :prd: FunA by
  apply(:prd: A):
    f >> apply(main-apply^1)

g_a :con: A:
  f_class'' >> bar2

g_b :con: A:
  (f-apply^1 + f_class-bar1^1 + f-apply^1) >> DONE

main_g :con: Foo:
  g >> apply
---------------------------------------------------------------------------------------------------
mangled-mu-jump-threading
---------------------------------------------------------------------------------------------------
f :prd: FunA by
  apply(:prd: A):
    g >> apply

f_class' :prd: Foo' by
  bar1(:prd: A):
    f_class'' >> bar2

f_class'' :prd: Foo'' by
  bar2:
    (f-apply^1 + f_class-bar1^1 + f-apply^1) >> DONE

g :prd: Fun by
  apply:
    f_class' >> bar1(a)

main :prd: FunA by
  apply(:prd: A):
    f >> apply(main-apply^1)
