codata Fun:
  apply'' :con: Fun

codata FunX:
  apply'(x :prd: X) :con: FunX

codata FunXY:
  apply(x :prd: X, k :con: Y) :con: FunXY

comatch f :prd: FunA:
  apply'(f_x) => g >> apply''

comatch f_clos :prd: FunAA:
  apply'(y) => (f_x + y) >> DONE

comatch g :prd: Fun(FunAA)A:
  apply'': => f_clos >> apply'(5)

comatch main :prd: FunAA:
  apply(main_x, DONE) => f >> apply'(main_x)
-------------------------------------------
drop(f_clos_ret |-> DONE)
-------------------------------------------
codata Fun:
  apply'' :con: Fun

codata FunX:
  apply'(x :prd: X) :con: FunX

codata FunXY:
  apply(x :prd: X, k :con: Y) :con: FunXY

comatch f :prd: FunA:
  apply'(f_x) => g >> apply''

comatch f_clos :prd: FunAA:
  apply(y, f_clos_ret) => (f_x + y) >> f_clos_ret

comatch g :prd: Fun(FunAA)A:
  apply'': => f_clos >> apply(5, DONE)

comatch main :prd: FunAA:
  apply(main_x, DONE) => f >> apply'(main_x)
-------------------------------------------
dedrop(F |-> f_clos)
-------------------------------------------
codata Fun:
  apply'' :con: Fun

codata FunX:
  apply'(x :prd: X) :con: FunX

codata FunXY:
  apply(x :prd: X, k :con: Y) :con: FunXY

comatch f :prd: FunA:
  apply'(f_x) => f_clos >> mu(F :prd: FunAA).g >> apply''

comatch f_clos :prd: FunAA:
  apply(y, f_clos_ret) => (f_x + y) >> f_clos_ret

comatch g :prd: Fun(FunAA)A:
  apply'': => F >> apply(5, DONE)

comatch main :prd: FunAA:
  apply(main_x, DONE) => f >> apply'(main_x)
-------------------------------------------
dedrop(g_F |-> F, g_ret |-> DONE)
-------------------------------------------
codata FunX:
  apply'(x :prd: X) :con: FunX

codata FunXY:
  apply(x :prd: X, k :con: Y) :con: FunXY

comatch f :prd: FunA:
  apply'(f_x) => f_clos >> mu(F :prd: FunAA).g >> apply(F, DONE)

comatch f_clos :prd: FunAA:
  apply(y, f_clos_ret) => (f_x + y) >> f_clos_ret

comatch g :prd: Fun(FunAA)A:
  apply(g_F, g_ret): => g_F >> apply(5, g_ret)

comatch main :prd: FunAA:
  apply(main_x, DONE) => f >> apply'(main_x)
-------------------------------------------
dedrop(f_ret |-> mu...)
-------------------------------------------
codata FunXY:
  apply(x :prd: X, k :con: Y) :con: FunXY

comatch f :prd: FunA(FunAA):
  apply(f_x, f_ret) => f_clos >> f_ret

comatch f_clos :prd: FunAA:
  apply(y, f_clos_ret) => (f_x + y) >> f_clos_ret

comatch g :prd: Fun(FunAA)A:
  apply(g_F, g_ret): => g_F >> apply(5, g_ret)

comatch main :prd: FunAA:
  apply(main_x, DONE) => f >> apply(main_x, mu(F :prd: FunAA).g >> apply(F, DONE))
-------------------------------------------
decompile-codata
-------------------------------------------
f(x: A) -> (A - > A) = return \y: A.x+y

g(F: A -> A) -> A = return F(5)

main(x) = g(f(x))
-------------------------------------------
compile-thorin
-------------------------------------------
f(f_x: A, f_ret: fn(fn(A, fn(A))):
 f_ret(f_clos)

f_clos(y: A, f_clos_ret: fn(A)):
  f_clos_ret(f_x + y)

g(g_F: fn(A, fn(A)), g_ret: fn(A)):
  g_F(5, g_ret)

main(main_x:A, DONE: fn(A)):
 f(main_x, main_g)

main_g(F: fn(A, fn(A)):
  g(F, DONE)
-------------------------------------------
drop(f_ret |-> main_g)
-------------------------------------------
f(f_x: A):
 main_g(f_clos)

f_clos(y: A, f_clos_ret: fn(A)):
  f_clos_ret(f_x + y)

g(g_F: fn(A, fn(A)), g_ret: fn(A)):
  g_F(5, g_ret)

main(main_x: A, DONE: fn(A)):
 f(main_x)

main_g(F: fn(A, fn(A)):
  g(F, DONE)
-------------------------------------------
drop(g_F |-> F, g_ret |-> DONE)
-------------------------------------------
f(f_x: A):
 main_g(f_clos)

f_clos(y: A, f_clos_ret: fn(A)):
  f_clos_ret(f_x + y)

g():
  F(5, DONE)

main(main_x: A, DONE: fn(A)):
 f(main_x)

main_g(F: fn(A, fn(A)):
  g()
-------------------------------------------
drop(F |-> f_clos)
-------------------------------------------
f(f_x: A):
 main_g()

f_clos(y: A, f_clos_ret: fn(A)):
  f_clos_ret(f_x + y)

g():
  f_clos(5, DONE)

main(main_x: A, DONE: fn(A)):
 f(main_x)

main_g():
  g()
-------------------------------------------
drop(f_clos_ret |-> DONE)
-------------------------------------------
f(f_x: A):
 main_g()

f_clos(y: A):
  DONE(f_x + y)

g():
  f_clos(5)

main(main_x: A, DONE: fn(A)):
 f(main_x)

main_g():
  g()
